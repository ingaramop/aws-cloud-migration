---
AWSTemplateFormatVersion: '2010-09-09'
Description: 'Amazon EKS Cluster'

############################ PARAMETERS GROUP AND ORDER DEFINITION ############################    
Metadata: 
  AWS::CloudFormation::Interface: 
    ParameterGroups: 
      - 
        Label: 
          default: "Network Configuration"
        Parameters: 
          - CIDRVPC
          - CIDRPrivateKubernetesSubnetAZ1
          - CIDRPrivateKubernetesSubnetAZ2
          - CIDRPublicKubernetesSubnetAZ1
          - CIDRPublicKubernetesSubnetAZ2   
      - 
        Label: 
          default: "Kubernetes Cluster"
        Parameters: 
          - EksClusterName
          - MinNumberOfWorkerNodes
          - DesiredNumberOfWorkerNodes
          - MaxNumberOfWorkerNodes
          - K8sWorkerNodesInstanceType
          - KubernetesVersion
          - K8sManagedNodesKey

############################ PARAMETERS ############################  
Parameters:
### Network Configuration
  CIDRVPC:
    Description: >-
      CIDR for the VPC
    Type: String
    MinLength: '9'
    MaxLength: '18'
    Default: 10.0.0.0/16
    AllowedPattern: '(\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})'
    ConstraintDescription: must be a valid CIDR range of the form x.x.x.x/x.
  CIDRPublicKubernetesSubnetAZ1:
    Description: >-
      CIDR for the Private K8s Subnet in AZ1
    Type: String
    MinLength: '9'
    MaxLength: '18'
    Default: 10.0.21.0/24
    AllowedPattern: '(\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})'
    ConstraintDescription: must be a valid CIDR range of the form x.x.x.x/x.
  CIDRPublicKubernetesSubnetAZ2:
    Description: >-
      CIDR for the Private K8s Subnet in AZ2
    Type: String
    MinLength: '9'
    MaxLength: '18'
    Default: 10.0.22.0/24
    AllowedPattern: '(\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})'
    ConstraintDescription: must be a valid CIDR range of the form x.x.x.x/x.
  CIDRPrivateKubernetesSubnetAZ1:
    Description: >-
      CIDR for the Private K8s Subnet in AZ1
    Type: String
    MinLength: '9'
    MaxLength: '18'
    Default: 10.0.31.0/24
    AllowedPattern: '(\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})'
    ConstraintDescription: must be a valid CIDR range of the form x.x.x.x/x.
  CIDRPrivateKubernetesSubnetAZ2:
    Description: >-
      CIDR for the Private K8s Subnet in AZ2
    Type: String
    MinLength: '9'
    MaxLength: '18'
    Default: 10.0.32.0/24
    AllowedPattern: '(\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})'
    ConstraintDescription: must be a valid CIDR range of the form x.x.x.x/x.
    
### Kubernetes Cluster
  EksClusterName:
    Type: String
    Default: eks-cluster
  MinNumberOfWorkerNodes:
    Type: Number
    Default: 1
  DesiredNumberOfWorkerNodes:
    Type: Number
    Default: 2
  MaxNumberOfWorkerNodes:
    Type: Number
    Default: 5
  K8sWorkerNodesInstanceType:
    Type: String
    Default: t2.micro
  KubernetesVersion:
    Type: String
    Default: 1.27
          
Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock:  !Ref CIDRVPC
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
      - Key: Name
        Value: !Sub '${AWS::StackName}-VPC'

  InternetGateway:
    Type: "AWS::EC2::InternetGateway"

  VPCGatewayAttachment:
    Type: "AWS::EC2::VPCGatewayAttachment"
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC

  K8SPublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: Public Subnets
      - Key: Network
        Value: Public

  K8SPrivateRouteTableAZ1:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: Private Subnet AZ1
      - Key: Network
        Value: Private01

  K8SPrivateRouteTableAZ2:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: Private Subnet AZ2
      - Key: Network
        Value: Private02

  K8SPublicSubnetInternetRoute:
    DependsOn: VPCGatewayAttachment
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref K8SPublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  K8SPrivateInternetRouteAZ1:
    DependsOn:
    - VPCGatewayAttachment
    - K8sNatGatewayAZ1
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref K8SPrivateRouteTableAZ1
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref K8sNatGatewayAZ1

  K8SPrivateInternetRouteAZ2:
    DependsOn:
    - VPCGatewayAttachment
    - K8sNatGatewayAZ2
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref K8SPrivateRouteTableAZ2
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref K8sNatGatewayAZ2

  K8sNatGatewayAZ1:
    DependsOn:
    - K8sNatGatewayEIpAz1
    - K8sPublicSubnetAZ1
    - VPCGatewayAttachment
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt 'K8sNatGatewayEIpAz1.AllocationId'
      SubnetId: !Ref K8sPublicSubnetAZ1
      Tags:
      - Key: Name
        Value: !Sub '${AWS::StackName}-NatGatewayAZ1'

  K8sNatGatewayAZ2:
    DependsOn:
    - K8sNatGatewayEIpAz2
    - K8sPublicSubnetAZ2
    - VPCGatewayAttachment
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt 'K8sNatGatewayEIpAz2.AllocationId'
      SubnetId: !Ref K8sPublicSubnetAZ2
      Tags:
      - Key: Name
        Value: !Sub '${AWS::StackName}-NatGatewayAZ2'

  K8sNatGatewayEIpAz1:
    DependsOn:
    - VPCGatewayAttachment
    Type: 'AWS::EC2::EIP'
    Properties:
      Domain: vpc

  K8sNatGatewayEIpAz2:
    DependsOn:
    - VPCGatewayAttachment
    Type: 'AWS::EC2::EIP'
    Properties:
      Domain: vpc

  K8sPublicSubnetAZ1:
    Type: AWS::EC2::Subnet
    Metadata:
      Comment: Subnet 01
    Properties:
      MapPublicIpOnLaunch: true
      AvailabilityZone:
        Fn::Select:
        - '0'
        - Fn::GetAZs:
            Ref: AWS::Region
      CidrBlock:
        Ref: CIDRPublicKubernetesSubnetAZ1
      VpcId:
        Ref: VPC
      Tags:
      - Key: Name
        Value: !Sub "${AWS::StackName}-K8sPublicSubnetAZ2"
      - Key: kubernetes.io/role/elb
        Value: 1

  K8sPublicSubnetAZ2:
    Type: AWS::EC2::Subnet
    Metadata:
      Comment: Subnet 02
    Properties:
      MapPublicIpOnLaunch: true
      AvailabilityZone:
        Fn::Select:
        - '1'
        - Fn::GetAZs:
            Ref: AWS::Region
      CidrBlock:
        Ref: CIDRPublicKubernetesSubnetAZ2
      VpcId:
        Ref: VPC
      Tags:
      - Key: Name
        Value: !Sub "${AWS::StackName}-K8sPublicSubnetAZ2"
      - Key: kubernetes.io/role/elb
        Value: 1

  K8sPrivateSubnetAZ1:
    Type: AWS::EC2::Subnet
    Metadata:
      Comment: Subnet 03
    Properties:
      AvailabilityZone:
        Fn::Select:
        - '0'
        - Fn::GetAZs:
            Ref: AWS::Region
      CidrBlock:
        Ref: CIDRPrivateKubernetesSubnetAZ1
      VpcId:
        Ref: VPC
      Tags:
      - Key: Name
        Value: !Sub "${AWS::StackName}-K8sPrivateSubnetAZ1"
      - Key: kubernetes.io/role/internal-elb
        Value: 1

  K8sPrivateSubnetAZ2:
    Type: AWS::EC2::Subnet
    Metadata:
      Comment: Private Subnet 02
    Properties:
      AvailabilityZone:
        Fn::Select:
        - '1'
        - Fn::GetAZs:
            Ref: AWS::Region
      CidrBlock:
        Ref: CIDRPrivateKubernetesSubnetAZ2
      VpcId:
        Ref: VPC
      Tags:
      - Key: Name
        Value: !Sub "${AWS::StackName}-K8sPrivateSubnetAZ2"
      - Key: kubernetes.io/role/internal-elb
        Value: 1

  K8sPublicSubnetAZ1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref K8sPublicSubnetAZ1
      RouteTableId: !Ref K8SPublicRouteTable

  K8sPublicSubnetAZ2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref K8sPublicSubnetAZ2
      RouteTableId: !Ref K8SPublicRouteTable

  K8sPrivateSubnetAZ1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref K8sPrivateSubnetAZ1
      RouteTableId: !Ref K8SPrivateRouteTableAZ1

  K8sPrivateSubnetAZ2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref K8sPrivateSubnetAZ2
      RouteTableId: !Ref K8SPrivateRouteTableAZ2

  K8sControlPlaneSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Cluster communication with worker nodes
      VpcId: !Ref VPC

  ###########################################
  ## Roles
  ###########################################
  EksRole:
    Type: AWS::IAM::Role
    Properties: 
      RoleName: my.eks.cluster.role
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - eks.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/AmazonEKSClusterPolicy"
  EksNodeRole:
    Type: AWS::IAM::Role
    Properties: 
      RoleName: my.eks.node.role
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/AmazonEKSWorkerNodePolicy"
        - "arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly"
        - "arn:aws:iam::aws:policy/AmazonEKS_CNI_Policy"

  ###########################################
  ## Eks Cluster
  ###########################################

  EksCluster:
    Type: AWS::EKS::Cluster
    Properties:
      Name: !Ref EksClusterName
      Version: !Ref KubernetesVersion
      RoleArn: !GetAtt EksRole.Arn
      ResourcesVpcConfig:
        SecurityGroupIds:
          - !Ref K8sControlPlaneSecurityGroup
        SubnetIds:
        - !Ref K8sPrivateSubnetAZ1
        - !Ref K8sPrivateSubnetAZ2

  EksNodegroup:
    Type: AWS::EKS::Nodegroup
    DependsOn: EksCluster
    Properties:
      ClusterName: !Ref EksClusterName
      NodeRole: !GetAtt EksNodeRole.Arn
      InstanceTypes:
        - !Ref K8sWorkerNodesInstanceType 
      RemoteAccess:
        Ec2SshKey: !Ref K8sManagedNodesKey
        SourceSecurityGroups: 
          - !Ref EksWorkersSecurityGroup
      ScalingConfig:
        MinSize:
          Ref: MinNumberOfWorkerNodes
        DesiredSize:
          Ref: DesiredNumberOfWorkerNodes
        MaxSize:
          Ref: MaxNumberOfWorkerNodes
      Subnets:
        - !Ref K8sPrivateSubnetAZ1
        - !Ref K8sPrivateSubnetAZ2

  EksWorkersSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: >-
        Allow access from load balancer and bastion as well as outbound HTTP and
        HTTPS traffic
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '80'
          ToPort: '8080'
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: '22'
          ToPort: '22'
          CidrIp: 0.0.0.0/0
      
Outputs:
  PublicSubnetIds:
    Description: Public Subnets IDs in the VPC
    Value: !Join [ ",", [ !Ref K8sPublicSubnetAZ1, !Ref K8sPublicSubnetAZ2 ] ]
    Export:
      Name: PublicSubnetIds
  
  PrivateSubnetIds:
    Description: Private Subnets IDs in the VPC
    Value: !Join [ ",", [ !Ref K8sPrivateSubnetAZ1, !Ref K8sPrivateSubnetAZ2 ] ]
    Export:
      Name: PrivateSubnetIds

  K8sControlPlaneSecurityGroupId:
    Description: Security group for the cluster control plane communication with worker nodes
    Value: !Ref K8sControlPlaneSecurityGroup
    Export:
      Name: K8sControlPlaneSecurityGroupId

  VpcId:
    Description: The VPC Id
    Value: !Ref VPC
    Export:
      Name: VpcId