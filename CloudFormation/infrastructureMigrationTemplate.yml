AWSTemplateFormatVersion: 2010-09-09
Description: >-
  Features:
  v1:  
    - 1 vpn with 2 AZs, each with one private and public subnet
    - 1 ansible node in public subnet with external ssh access
    - 1 jenkins node in public subnet with only 8080 external access and internal ssh access
    - 1 server in private subnet and internal ssh access
    - 2 nat gateways in each public subnet
  v2:
    - Added a route53 internal DNS
    - Created parameters grouping and ordering
  v3:
    - created eks cluster
    
############################ PARAMETERS GROUP AND ORDER DEFINITION ############################    
Metadata: 
  AWS::CloudFormation::Interface: 
    ParameterGroups: 
      - 
        Label: 
          default: "Network Configuration"
        Parameters: 
          - CIDRVPC
          - CIDRPublicSubnetAZ1
          - CIDRPublicSubnetAZ2
          - CIDRPrivateSubnetAZ1
          - CIDRPrivateSubnetAZ2
          - CIDRPrivateKubernetesSubnetAZ1
          - CIDRPrivateKubernetesSubnetAZ2
          - CIDRPublicKubernetesSubnetAZ1
          - CIDRPublicKubernetesSubnetAZ2
          - InternalDomainName
      - 
        Label: 
          default: "SSH Keys"
        Parameters: 
          - AnsibleManagedNodesKey
          - AnsibleServerKey
      - 
        Label: 
          default: "Instance Types"
        Parameters: 
          - AnsibleServerInstanceType
          - JenkinsServerInstanceType
      - 
        Label: 
          default: "Kubernetes Cluster"
        Parameters: 
          - EksClusterName
          - MinNumberOfWorkerNodes
          - DesiredNumberOfWorkerNodes
          - MaxNumberOfWorkerNodes
          - K8sWorkerNodesInstanceType
          - KubernetesVersion

############################ PARAMETERS ############################  
Parameters:
### Network Configuration
  CIDRVPC:
    Description: >-
      CIDR for the VPC
    Type: String
    MinLength: '9'
    MaxLength: '18'
    Default: 10.0.0.0/16
    AllowedPattern: '(\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})'
    ConstraintDescription: must be a valid CIDR range of the form x.x.x.x/x.
  CIDRPublicSubnetAZ1:
    Description: >-
      CIDR for the Public Subnet in AZ1
    Type: String
    MinLength: '9'
    MaxLength: '18'
    Default: 10.0.1.0/24
    AllowedPattern: '(\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})'
    ConstraintDescription: must be a valid CIDR range of the form x.x.x.x/x.
  CIDRPublicSubnetAZ2:
    Description: >-
      CIDR for the Public Subnet in AZ2
    Type: String
    MinLength: '9'
    MaxLength: '18'
    Default: 10.0.2.0/24
    AllowedPattern: '(\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})'
    ConstraintDescription: must be a valid CIDR range of the form x.x.x.x/x.
  CIDRPrivateSubnetAZ1:
    Description: >-
      CIDR for the Private Subnet in AZ1
    Type: String
    MinLength: '9'
    MaxLength: '18'
    Default: 10.0.11.0/24
    AllowedPattern: '(\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})'
    ConstraintDescription: must be a valid CIDR range of the form x.x.x.x/x.
  CIDRPrivateSubnetAZ2:
    Description: >-
      CIDR for the Private Subnet in AZ2
    Type: String
    MinLength: '9'
    MaxLength: '18'
    Default: 10.0.12.0/24
    AllowedPattern: '(\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})'
    ConstraintDescription: must be a valid CIDR range of the form x.x.x.x/x.
  CIDRPublicKubernetesSubnetAZ1:
    Description: >-
      CIDR for the Private K8s Subnet in AZ1
    Type: String
    MinLength: '9'
    MaxLength: '18'
    Default: 10.0.21.0/24
    AllowedPattern: '(\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})'
    ConstraintDescription: must be a valid CIDR range of the form x.x.x.x/x.
  CIDRPublicKubernetesSubnetAZ2:
    Description: >-
      CIDR for the Private K8s Subnet in AZ2
    Type: String
    MinLength: '9'
    MaxLength: '18'
    Default: 10.0.22.0/24
    AllowedPattern: '(\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})'
    ConstraintDescription: must be a valid CIDR range of the form x.x.x.x/x.
  CIDRPrivateKubernetesSubnetAZ1:
    Description: >-
      CIDR for the Private K8s Subnet in AZ1
    Type: String
    MinLength: '9'
    MaxLength: '18'
    Default: 10.0.31.0/24
    AllowedPattern: '(\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})'
    ConstraintDescription: must be a valid CIDR range of the form x.x.x.x/x.
  CIDRPrivateKubernetesSubnetAZ2:
    Description: >-
      CIDR for the Private K8s Subnet in AZ2
    Type: String
    MinLength: '9'
    MaxLength: '18'
    Default: 10.0.32.0/24
    AllowedPattern: '(\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})'
    ConstraintDescription: must be a valid CIDR range of the form x.x.x.x/x.
  InternalDomainName:
    Description: Internal private DNS domain name
    Type: String
    Description: Domain name for the private hosted zone (e.g., example.com)
    Default: dev.internal
### SSH Keys
  AnsibleServerKey:
    Description: Name of an existing EC2 KeyPair to enable SSH access to the ansible instance
    Type: 'AWS::EC2::KeyPair::KeyName'
    ConstraintDescription: must be the name of an existing EC2 KeyPair.
    Default: AnsibleKey
  AnsibleManagedNodesKey:
    Description: Name of an existing EC2 KeyPair to enable local SSH access to the instances managed by ansible
    Type: 'AWS::EC2::KeyPair::KeyName'
    ConstraintDescription: must be the name of an existing EC2 KeyPair.
    Default: AnsibleManagedNodesKey
### Instance Types
  JenkinsServerInstanceType:
    Description: JenkinsServer Server EC2 instance type
    Type: String
    Default: t2.micro
    AllowedValues:
      - t2.micro
      - t2.medium
      - t2.xlarge
    ConstraintDescription: must be a valid EC2 instance type.
  AnsibleServerInstanceType:
    Description: AnsibleServer Server EC2 instance type
    Type: String
    Default: t2.micro
    AllowedValues:
      - t2.micro
      - t2.medium
      - t2.xlarge
    ConstraintDescription: must be a valid EC2 instance type.
    
### Kubernetes Cluster
  EksClusterName:
    Type: String
    Default: eks-cluster
  MinNumberOfWorkerNodes:
    Type: Number
    Default: 1
  DesiredNumberOfWorkerNodes:
    Type: Number
    Default: 2
  MaxNumberOfWorkerNodes:
    Type: Number
    Default: 5
  K8sWorkerNodesInstanceType:
    Type: String
    Default: t2.micro
  KubernetesVersion:
    Type: String
    Default: 1.27


############################ MAPPINGS ############################ 
Mappings:
  AWSRegionArch2AMI: 
    eu-central-1: 
      AMI: ami-0aa74281da945b6b5
    eu-north-1: 
      AMI: ami-0b4ab8a966e0c2b21
    eu-west-1: 
      AMI: ami-07be51e3c6d5f61d2
    eu-west-2: 
      AMI: ami-08523e156d117cc29
    eu-west-3: 
      AMI: ami-0041b98fa770e38cd

Resources:
          
############################ NETWORK - VPC ############################ 
  VPC:
    Type: 'AWS::EC2::VPC'
    Properties:
      CidrBlock: !Ref CIDRVPC
      EnableDnsSupport: 'true'
      EnableDnsHostnames: 'true'
      Tags:
        - Key: Application
          Value: !Ref 'AWS::StackId'
        - Key: Network
          Value: Public
          
  InternetGateway:
    Type: 'AWS::EC2::InternetGateway'
    Properties:
      Tags:
        - Key: Application
          Value: !Ref 'AWS::StackId'
        - Key: Network
          Value: Public
  InternetGatewayAttachment:
    Type: 'AWS::EC2::VPCGatewayAttachment'
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway
      
############################ NETWORK - Route53 DNS ############################ 

  PrivateHostedZone:
    Type: AWS::Route53::HostedZone
    Properties:
      Name: !Ref InternalDomainName
      VPCs:
        - VPCRegion: !Ref 'AWS::Region'
          VPCId: !Ref VPC

############################ PUBLIC ROUTE TABLES ############################  
 
  PublicRouteTable:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Application
          Value: !Ref 'AWS::StackId'
        - Key: Network
          Value: Public
  InternetRoute:
    Type: 'AWS::EC2::Route'
    DependsOn: InternetGatewayAttachment
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
#  VpcRoute:
#    Type: 'AWS::EC2::Route'
#    Properties:
#      RouteTableId: !Ref PublicRouteTable
#      DestinationCidrBlock: !Ref CIDRVPC
#      GatewayId: local
  
      
############################ PUBLIC NETWORKS ACLs ############################ 
  PublicNetworkAcl:
    Type: 'AWS::EC2::NetworkAcl'
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Application
          Value: !Ref 'AWS::StackId'
        - Key: Network
          Value: Public
  InboundHTTPPublicNetworkAclEntry:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      NetworkAclId: !Ref PublicNetworkAcl
      RuleNumber: '100'
      Protocol: '6'
      RuleAction: allow
      Egress: 'false'
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: '8080'
        To: '8080'
  InboundDynamicPortPublicNetworkAclEntry:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      NetworkAclId: !Ref PublicNetworkAcl
      RuleNumber: '101'
      Protocol: '6'
      RuleAction: allow
      Egress: 'false'
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: '32768'
        To: '65535'
  InboundSSHPublicNetworkAclEntry:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      NetworkAclId: !Ref PublicNetworkAcl
      RuleNumber: '102'
      Protocol: '6'
      RuleAction: allow
      Egress: 'false'
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: '22'
        To: '22'
  InboundTrafficFromVpc:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      NetworkAclId: !Ref PublicNetworkAcl
      RuleNumber: '103'
      Protocol: '6'
      RuleAction: allow
      Egress: 'false'
      CidrBlock: !Ref CIDRVPC
      PortRange:
        From: '0'
        To: '65535'
  OutboundPublicNetworkAclEntry:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      NetworkAclId: !Ref PublicNetworkAcl
      RuleNumber: '100'
      Protocol: '6'
      RuleAction: allow
      Egress: 'true'
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: '0'
        To: '65535'
  PublicSubnetNetworkAclAssociation1:
    Type: 'AWS::EC2::SubnetNetworkAclAssociation'
    Properties:
      SubnetId: !Ref PublicSubnet1
      NetworkAclId: !Ref PublicNetworkAcl
  PublicSubnetNetworkAclAssociation2:
    Type: 'AWS::EC2::SubnetNetworkAclAssociation'
    Properties:
      SubnetId: !Ref PublicSubnet2
      NetworkAclId: !Ref PublicNetworkAcl
      
      
############################ PUBLIC SUBNET - AZ1 ############################ 

  PublicSubnet1:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Ref CIDRPublicSubnetAZ1
      AvailabilityZone: !Select 
        - 0
        - !GetAZs ''
      Tags:
        - Key: Application
          Value: !Ref 'AWS::StackId'
        - Key: Network
          Value: Public 
          
  NATGatewayAz1:
    DependsOn:
      - InternetGatewayAttachment
      - ElasticIPAz1
      - PublicSubnet1
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt ElasticIPAz1.AllocationId
      SubnetId: !Ref PublicSubnet1
      
  ElasticIPAz1:
    Type: AWS::EC2::EIP
    
  PublicSubnetRouteTableAssociation1:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref PublicSubnet1
      RouteTableId: !Ref PublicRouteTable

############################ PUBLIC SUBNET - AZ2 ############################ 

  PublicSubnet2:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Ref CIDRPublicSubnetAZ2
      AvailabilityZone: !Select 
        - 1
        - !GetAZs ''
      Tags:
        - Key: Application
          Value: !Ref 'AWS::StackId'
        - Key: Network
          Value: Public
          Value: 1
          
  NATGatewayAz2:
    DependsOn:
      - InternetGatewayAttachment
      - ElasticIPAz2
      - PublicSubnet2
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt ElasticIPAz2.AllocationId
      SubnetId: !Ref PublicSubnet2
      
  ElasticIPAz2:
    Type: AWS::EC2::EIP
  PublicSubnetRouteTableAssociation2:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref PublicSubnet2
      RouteTableId: !Ref PublicRouteTable

############################ PRIVATE NETWORKS ACLs ############################ 
  PrivateNetworkAcl:
    Type: 'AWS::EC2::NetworkAcl'
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Application
          Value: !Ref 'AWS::StackId'
        - Key: Network
          Value: Private
  InboundDynamicPortPrivateNetworkAclEntry:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      NetworkAclId: !Ref PrivateNetworkAcl
      RuleNumber: '101'
      Protocol: '6'
      RuleAction: allow
      Egress: 'false'
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: '32768'
        To: '65535'
  InboundSSHPrivateNetworkAclEntry:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      NetworkAclId: !Ref PrivateNetworkAcl
      RuleNumber: '102'
      Protocol: '6'
      RuleAction: allow
      Egress: 'false'
      CidrBlock: !Ref CIDRVPC
      PortRange:
        From: '22'
        To: '22'
  OutboundPrivateNetworkAclEntry:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      NetworkAclId: !Ref PrivateNetworkAcl
      RuleNumber: '100'
      Protocol: '6'
      RuleAction: allow
      Egress: 'true'
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: '0'
        To: '65535'

############################ PRIVATE ROUTE TABLES ############################ 

  PrivateRouteTable1:
    DependsOn:
      - InternetGatewayAttachment
      - NATGatewayAz2
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Application
          Value: !Ref 'AWS::StackId'
        - Key: Network
          Value: Private
  NatGatewayRoute1:
    Type: 'AWS::EC2::Route'
    DependsOn: InternetGatewayAttachment
    Properties:
      RouteTableId: !Ref PrivateRouteTable1
      DestinationCidrBlock: '0.0.0.0/0'
      NatGatewayId: !Ref NATGatewayAz1  

  PrivateRouteTable2:
    DependsOn:
      - InternetGatewayAttachment
      - NATGatewayAz2
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Application
          Value: !Ref 'AWS::StackId'
        - Key: Network
          Value: Private
  NatGatewayRoute2:
    Type: 'AWS::EC2::Route'
    DependsOn: InternetGatewayAttachment
    Properties:
      RouteTableId: !Ref PrivateRouteTable2
      DestinationCidrBlock: '0.0.0.0/0'
      NatGatewayId: !Ref NATGatewayAz2    
      
############################ PRIVATE SUBNET - AZ1 ############################

  PrivateSubnet1:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Ref CIDRPrivateSubnetAZ1
      AvailabilityZone: !Select 
        - 0
        - !GetAZs ''
      Tags:
        - Key: Application
          Value: !Ref 'AWS::StackId'
        - Key: Network
          Value: Private
  PrivateSubnetRouteTableAssociation1:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref PrivateSubnet1
      RouteTableId: !Ref PrivateRouteTable1

  PrivateSubnetNetworkAclAssociation1:
    Type: 'AWS::EC2::SubnetNetworkAclAssociation'
    Properties:
      SubnetId: !Ref PrivateSubnet1
      NetworkAclId: !Ref PrivateNetworkAcl
           
############################ PRIVATE SUBNET - AZ2 ############################ 

  PrivateSubnet2:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Ref CIDRPrivateSubnetAZ2
      AvailabilityZone: !Select 
        - 1
        - !GetAZs ''
      Tags:
        - Key: Application
          Value: !Ref 'AWS::StackId'
        - Key: Network
          Value: Private
  PrivateSubnetRouteTableAssociation2:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref PrivateSubnet2
      RouteTableId: !Ref PrivateRouteTable2

  PrivateSubnetNetworkAclAssociation2:
    Type: 'AWS::EC2::SubnetNetworkAclAssociation'
    Properties:
      SubnetId: !Ref PrivateSubnet2
      NetworkAclId: !Ref PrivateNetworkAcl
  
############################ PUBLIC KUBERNETES ROUTING ############################
  K8SPublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: Public Subnets
      - Key: Network
        Value: Public

  K8SPublicSubnetInternetRoute:
    DependsOn: InternetGatewayAttachment
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref K8SPublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  K8sPublicSubnetAZ1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref K8sPublicSubnetAZ1
      RouteTableId: !Ref K8SPublicRouteTable

  K8sPublicSubnetAZ2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref K8sPublicSubnetAZ2
      RouteTableId: !Ref K8SPublicRouteTable

############################ PUBLIC KUBERNETES SUBNET - AZ1 ############################
  K8sPublicSubnetAZ1:
    Type: AWS::EC2::Subnet
    Metadata:
      Comment: Subnet 01
    Properties:
      MapPublicIpOnLaunch: true
      AvailabilityZone:
        Fn::Select:
        - '0'
        - Fn::GetAZs:
            Ref: AWS::Region
      CidrBlock:
        Ref: CIDRPublicKubernetesSubnetAZ1
      VpcId:
        Ref: VPC
      Tags:
      - Key: Name
        Value: !Sub "${AWS::StackName}-K8sPublicSubnetAZ1"
      - Key: kubernetes.io/role/elb
        Value: 1
        
  K8sNatGatewayEIpAz1:
    DependsOn:
    - InternetGatewayAttachment
    Type: 'AWS::EC2::EIP'
    Properties:
      Domain: vpc

  K8sNatGatewayAZ1:
    DependsOn:
    - K8sNatGatewayEIpAz1
    - K8sPublicSubnetAZ1
    - InternetGatewayAttachment
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt 'K8sNatGatewayEIpAz1.AllocationId'
      SubnetId: !Ref K8sPublicSubnetAZ1
      Tags:
      - Key: Name
        Value: !Sub '${AWS::StackName}-NatGatewayAZ1'



############################ PUBLIC KUBERNETES SUBNET - AZ2 ############################
  K8sPublicSubnetAZ2:
    Type: AWS::EC2::Subnet
    Metadata:
      Comment: Subnet 02
    Properties:
      MapPublicIpOnLaunch: true
      AvailabilityZone:
        Fn::Select:
        - '1'
        - Fn::GetAZs:
            Ref: AWS::Region
      CidrBlock:
        Ref: CIDRPublicKubernetesSubnetAZ2
      VpcId:
        Ref: VPC
      Tags:
      - Key: Name
        Value: !Sub "${AWS::StackName}-K8sPublicSubnetAZ2"
      - Key: kubernetes.io/role/elb
        Value: 1
  K8sNatGatewayEIpAz2:
    DependsOn:
    - InternetGatewayAttachment
    Type: 'AWS::EC2::EIP'
    Properties:
      Domain: vpc

  K8sNatGatewayAZ2:
    DependsOn:
    - K8sNatGatewayEIpAz2
    - K8sPublicSubnetAZ2
    - InternetGatewayAttachment
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt 'K8sNatGatewayEIpAz2.AllocationId'
      SubnetId: !Ref K8sPublicSubnetAZ2
      Tags:
      - Key: Name
        Value: !Sub '${AWS::StackName}-NatGatewayAZ2'


############################ PRIVATE KUBERNETES SUBNET - AZ1 ############################
  K8sPrivateSubnetAZ1:
    Type: AWS::EC2::Subnet
    Metadata:
      Comment: Subnet 03
    Properties:
      AvailabilityZone:
        Fn::Select:
        - '0'
        - Fn::GetAZs:
            Ref: AWS::Region
      CidrBlock:
        Ref: CIDRPrivateKubernetesSubnetAZ1
      VpcId:
        Ref: VPC
      Tags:
      - Key: Name
        Value: !Sub "${AWS::StackName}-K8sPrivateSubnetAZ1"
      - Key: kubernetes.io/role/internal-elb
        Value: 1
  K8SPrivateRouteTableAZ1:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: Private Subnet AZ1
      - Key: Network
        Value: Private01
  K8SPrivateInternetRouteAZ1:
    DependsOn:
    - InternetGatewayAttachment
    - K8sNatGatewayAZ1
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref K8SPrivateRouteTableAZ1
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref K8sNatGatewayAZ1
  K8sPrivateSubnetAZ1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref K8sPrivateSubnetAZ1
      RouteTableId: !Ref K8SPrivateRouteTableAZ1
############################ PRIVATE KUBERNETES SUBNET - AZ2 ############################
  K8sPrivateSubnetAZ2:
    Type: AWS::EC2::Subnet
    Metadata:
      Comment: Private Subnet 02
    Properties:
      AvailabilityZone:
        Fn::Select:
        - '1'
        - Fn::GetAZs:
            Ref: AWS::Region
      CidrBlock:
        Ref: CIDRPrivateKubernetesSubnetAZ2
      VpcId:
        Ref: VPC
      Tags:
      - Key: Name
        Value: !Sub "${AWS::StackName}-K8sPrivateSubnetAZ2"
      - Key: kubernetes.io/role/internal-elb
        Value: 1
  K8SPrivateRouteTableAZ2:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: Private Subnet AZ2
      - Key: Network
        Value: Private02
  K8SPrivateInternetRouteAZ2:
    DependsOn:
    - InternetGatewayAttachment
    - K8sNatGatewayAZ2
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref K8SPrivateRouteTableAZ2
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref K8sNatGatewayAZ2
  K8sPrivateSubnetAZ2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref K8sPrivateSubnetAZ2
      RouteTableId: !Ref K8SPrivateRouteTableAZ2      
 ############################ Jenkins INSTANCE ############################          
  JenkinsEC2Instance:
    Type: 'AWS::EC2::Instance'
    Properties:
      InstanceType: !Ref JenkinsServerInstanceType
      NetworkInterfaces:
        - GroupSet:
            - !Ref JenkinsInstanceSecurityGroup
          AssociatePublicIpAddress: 'true'
          DeviceIndex: '0'
          DeleteOnTermination: 'true'
          SubnetId: !Ref PublicSubnet2
      KeyName: !Ref AnsibleManagedNodesKey
      ImageId: !FindInMap 
        - AWSRegionArch2AMI
        - !Ref 'AWS::Region'
        - AMI

  JenkinsInstanceSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      VpcId: !Ref VPC
      GroupDescription: Enable SSH access via port 22 and http 8080
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '8080'
          ToPort: '8080'
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: '22'
          ToPort: '22'
          CidrIp: !Ref CIDRVPC

  JenkinsDnsRecordA:
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneId: !Ref PrivateHostedZone
      Name:
        Fn::Sub:
          - "${InstanceName}${ExternalValue}"
          - InstanceName: "jenkins."
            ExternalValue: !Ref InternalDomainName
      Type: A
      TTL: 60
      ResourceRecords:
        - !GetAtt JenkinsEC2Instance.PrivateIp 
        
 ############################ ANSIBLE INSTANCE ############################          
  AnsibleEC2Instance:
    Type: 'AWS::EC2::Instance'
    Properties:
      InstanceType: !Ref AnsibleServerInstanceType
      NetworkInterfaces:
        - GroupSet:
            - !Ref AnsibleInstanceSecurityGroup
          AssociatePublicIpAddress: 'true'
          DeviceIndex: '0'
          DeleteOnTermination: 'true'
          SubnetId: !Ref PublicSubnet1
      KeyName: !Ref AnsibleServerKey
      ImageId: !FindInMap 
        - AWSRegionArch2AMI
        - !Ref 'AWS::Region'
        - AMI
      UserData: 
        Fn::Base64: !Sub |
          #!/bin/bash -x
          amazon-linux-extras install -y ansible2

  AnsibleInstanceSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      VpcId: !Ref VPC
      GroupDescription: Enable SSH access via port 22
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '22'
          ToPort: '22'
          CidrIp: 0.0.0.0/0    

 ############################ Private INSTANCE ############################          
  PrivateEC2Instance:
    Type: 'AWS::EC2::Instance'
    Properties:
      InstanceType: !Ref JenkinsServerInstanceType
      NetworkInterfaces:
        - GroupSet:
            - !Ref PrivateInstanceSecurityGroup
          AssociatePublicIpAddress: 'false'
          DeviceIndex: '0'
          DeleteOnTermination: 'true'
          SubnetId: !Ref PrivateSubnet1
      KeyName: !Ref AnsibleManagedNodesKey
      ImageId: !FindInMap 
        - AWSRegionArch2AMI
        - !Ref 'AWS::Region'
        - AMI

  PrivateInstanceSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      VpcId: !Ref VPC
      GroupDescription: Enable SSH access via port 22 and http 8080
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '22'
          ToPort: '22'
          CidrIp: !Ref CIDRVPC    

  PrivateInstanceDnsRecordA:
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneId: !Ref PrivateHostedZone
      Name:
        Fn::Sub:
          - "${InstanceName}${ExternalValue}"
          - InstanceName: "private.instance."
            ExternalValue: !Ref InternalDomainName
      Type: A
      TTL: 60
      ResourceRecords:
        - !GetAtt PrivateEC2Instance.PrivateIp
        
############################ KUBERNETES EKS CLUSTER ############################

  K8sControlPlaneSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Cluster communication with worker nodes
      VpcId: !Ref VPC

  ###########################################
  ## Roles
  ###########################################
  EksRole:
    Type: AWS::IAM::Role
    Properties: 
      RoleName: my.eks.cluster.role
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - eks.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/AmazonEKSClusterPolicy"
  EksNodeRole:
    Type: AWS::IAM::Role
    Properties: 
      RoleName: my.eks.node.role
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/AmazonEKSWorkerNodePolicy"
        - "arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly"
        - "arn:aws:iam::aws:policy/AmazonEKS_CNI_Policy"

  ###########################################
  ## Eks Cluster
  ###########################################

  EksCluster:
    Type: AWS::EKS::Cluster
    Properties:
      Name: !Ref EksClusterName
      Version: !Ref KubernetesVersion
      RoleArn: !GetAtt EksRole.Arn
      ResourcesVpcConfig:
        SecurityGroupIds:
          - !Ref K8sControlPlaneSecurityGroup
        SubnetIds:
        - !Ref K8sPrivateSubnetAZ1
        - !Ref K8sPrivateSubnetAZ2

  EksNodegroup:
    Type: AWS::EKS::Nodegroup
    DependsOn: EksCluster
    Properties:
      ClusterName: !Ref EksClusterName
      NodeRole: !GetAtt EksNodeRole.Arn
      InstanceTypes:
        - !Ref K8sWorkerNodesInstanceType 
      RemoteAccess:
        Ec2SshKey: !Ref AnsibleManagedNodesKey
        SourceSecurityGroups: 
          - !Ref EksWorkersSecurityGroup
      ScalingConfig:
        MinSize:
          Ref: MinNumberOfWorkerNodes
        DesiredSize:
          Ref: DesiredNumberOfWorkerNodes
        MaxSize:
          Ref: MaxNumberOfWorkerNodes
      Subnets:
        - !Ref K8sPrivateSubnetAZ1
        - !Ref K8sPrivateSubnetAZ2

  EksWorkersSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: >-
        Allow access from load balancer and bastion as well as outbound HTTP and
        HTTPS traffic
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '80'
          ToPort: '8080'
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: '22'
          ToPort: '22'
          CidrIp: 0.0.0.0/0
      
Outputs:
  PublicSubnetIds:
    Description: Public Subnets IDs in the VPC
    Value: !Join [ ",", [ !Ref K8sPublicSubnetAZ1, !Ref K8sPublicSubnetAZ2 ] ]
    Export:
      Name: PublicSubnetIds
  
  PrivateSubnetIds:
    Description: Private Subnets IDs in the VPC
    Value: !Join [ ",", [ !Ref K8sPrivateSubnetAZ1, !Ref K8sPrivateSubnetAZ2 ] ]
    Export:
      Name: PrivateSubnetIds

  K8sControlPlaneSecurityGroupId:
    Description: Security group for the cluster control plane communication with worker nodes
    Value: !Ref K8sControlPlaneSecurityGroup
    Export:
      Name: K8sControlPlaneSecurityGroupId

  VpcId:
    Description: The VPC Id
    Value: !Ref VPC
    Export:
      Name: VpcId

